// Copyright (c) Microsoft. All rights reserved.

using System.Text;
using Azure.AI.OpenAI;
using Azure.Identity;
using Microsoft.Agents.AI;
using Microsoft.Extensions.AI;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Agents;
using Microsoft.SemanticKernel.Agents.OpenAI;
using OpenAI;
using OpenAI.Assistants;

var endpoint = Environment.GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT") ?? throw new InvalidOperationException("AZURE_OPENAI_ENDPOINT is not set.");
var deploymentName = System.Environment.GetEnvironmentVariable("AZURE_OPENAI_DEPLOYMENT_NAME") ?? "gpt-4o";
var userInput = "Create a python code file using the code interpreter tool with a code ready to determine the values in the Fibonacci sequence that are less then the value of 101";

var assistantsClient = new AzureOpenAIClient(new Uri(endpoint), new AzureCliCredential()).GetAssistantClient();

Console.WriteLine($"User Input: {userInput}");

await SKAgent();
await AFAgent();

async Task SKAgent()
{
    Console.WriteLine("\n=== SK Agent ===\n");
    var _ = Kernel.CreateBuilder().AddAzureOpenAIChatClient(deploymentName, endpoint, new AzureCliCredential());

    // Define the assistant
    Assistant assistant = await assistantsClient.CreateAssistantAsync(deploymentName, enableCodeInterpreter: true);

    // Create the agent
    OpenAIAssistantAgent agent = new(assistant, assistantsClient);

    // Create a thread for the agent conversation.
    var thread = new OpenAIAssistantAgentThread(assistantsClient);

    // Respond to user input
    await foreach (var content in agent.InvokeAsync(userInput, thread))
    {
        if (!string.IsNullOrWhiteSpace(content.Message.Content))
        {
            bool isCode = content.Message.Metadata?.ContainsKey(OpenAIAssistantAgent.CodeInterpreterMetadataKey) ?? false;
            Console.WriteLine($"\n# {content.Message.Role}{(isCode ? "\n# Generated Code:\n" : ":")}{content.Message.Content}");
        }

        // Check for the citations
        foreach (var item in content.Message.Items)
        {
            // Process each item in the message
            if (item is AnnotationContent annotation)
            {
                if (annotation.Kind != AnnotationKind.UrlCitation)
                {
                    Console.WriteLine($"  [{item.GetType().Name}] {annotation.Label}: File #{annotation.ReferenceId}");
                }
            }
            else if (item is FileReferenceContent fileReference)
            {
                Console.WriteLine($"  [{item.GetType().Name}] File #{fileReference.FileId}");
            }
        }
    }

    // Clean up
    await thread.DeleteAsync();
    await assistantsClient.DeleteAssistantAsync(agent.Id);
}

async Task AFAgent()
{
    Console.WriteLine("\n=== AF Agent ===\n");

    var agent = await assistantsClient.CreateAIAgentAsync(deploymentName, tools: [new HostedCodeInterpreterTool()]);

    var thread = agent.GetNewThread();

    var result = await agent.RunAsync(userInput, thread);
    Console.WriteLine(result);

    // Extracts via breaking glass the code generated by code interpreter tool
    var chatResponse = result.RawRepresentation as ChatResponse;
    StringBuilder generatedCode = new();
    foreach (object? updateRawRepresentation in chatResponse?.RawRepresentation as IEnumerable<object?> ?? [])
    {
        if (updateRawRepresentation is RunStepDetailsUpdate update && update.CodeInterpreterInput is not null)
        {
            generatedCode.Append(update.CodeInterpreterInput);
        }
    }

    if (!string.IsNullOrEmpty(generatedCode.ToString()))
    {
        Console.WriteLine($"\n# {chatResponse?.Messages[0].Role}:Generated Code:\n{generatedCode}");
    }

    // Check for the citations
    foreach (var textContent in result.Messages[0].Contents.OfType<Microsoft.Extensions.AI.TextContent>())
    {
        foreach (var annotation in textContent.Annotations ?? [])
        {
            if (annotation is CitationAnnotation citation)
            {
                if (citation.Url is null)
                {
                    Console.WriteLine($"  [{citation.GetType().Name}] {citation.Snippet}: File #{citation.FileId}");
                }

                foreach (var region in citation.AnnotatedRegions ?? [])
                {
                    if (region is TextSpanAnnotatedRegion textSpanRegion)
                    {
                        Console.WriteLine($"\n[TextSpan Region] {textSpanRegion.StartIndex}-{textSpanRegion.EndIndex}");
                    }
                }
            }
        }
    }

    // Clean up
    if (thread is ChatClientAgentThread chatThread)
    {
        await assistantsClient.DeleteThreadAsync(chatThread.ConversationId);
    }
    await assistantsClient.DeleteAssistantAsync(agent.Id);
}
