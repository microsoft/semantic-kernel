@page "/chat"
@using Microsoft.SemanticKernel
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]
@rendermode InteractiveServer

@inject AgentCompletionsApiClient AgentCompletionsApi
@inject FilesApiClient FileApi;

<PageTitle>Chat</PageTitle>

<div class="chat-page">
    <div class="chat-container">
        <div class="chat-history">
            @foreach (var message in messages)
            {
                <div class="message @(message.Sender == "User" ? "user" : "agent")">
                    @message.Text
                </div>
            }
        </div>
    </div>
    <div class="chat-input">
        <textarea @bind="userMessage" @bind:event="oninput" @onkeydown="HandleKeyDown" placeholder="@(GetPlaceholderText())" disabled="@(fileUploadState != FileUploadState.Uploaded)"></textarea>
        <div class="chat-button-container">
            @if (fileUploadState == FileUploadState.InProgress)
            {
                <div class="spinner"></div>
            }
            else
            {
                <label title="Upload a PDF file">
                    <img src="images/paperclip.svg" class="clip-icon @(fileUploadState == FileUploadState.Uploaded ? "" : "zoom")" />
                    <InputFile type="file" OnChange="UploadFiles" accept=".pdf" hidden/>
                </label>
            }
            <button class="btn btn-primary" @onclick="SendMessage" disabled="@(fileUploadState != FileUploadState.Uploaded || string.IsNullOrWhiteSpace(userMessage))">Send</button>
        </div>
    </div>
</div>

@code {
    private FileUploadState fileUploadState = FileUploadState.NotUploaded;
    private List<Message> messages = new();
    private string userMessage = string.Empty;

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(userMessage))
        {
            messages.Add(new Message { Sender = "User", Text = userMessage });

            var prompt = userMessage;

            userMessage = string.Empty;

            bool agentMessageAdded = false;

            var agentMessage = new Message { Sender = "Agent", Text = string.Empty };

            await foreach (var update in AgentCompletionsApi.CompleteStreamingAsync(prompt, CancellationToken.None))
            {
                if (!agentMessageAdded)
                {
                    messages.Add(agentMessage);
                    agentMessageAdded = true;
                }

                agentMessage.Text += update;

                // Trigger UI update
                this.StateHasChanged();
            }
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            fileUploadState = FileUploadState.InProgress;
            await FileApi.UploadFilesAsync(e.GetMultipleFiles());
        }
        finally
        {
            fileUploadState = FileUploadState.Uploaded;
        }
    }

    private string GetPlaceholderText()
    {
        return fileUploadState switch
        {
            FileUploadState.InProgress => "File is being uploaded, please wait...",
            FileUploadState.Uploaded => "File has been uploaded, now enter your query.",
            _ => "Upload a PDF file"
        };
    }

    private enum FileUploadState
    {
        NotUploaded,
        InProgress,
        Uploaded
    }

    private class Message
    {
        public required string Sender { get; set; }

        public required string Text { get; set; }
    }
}
