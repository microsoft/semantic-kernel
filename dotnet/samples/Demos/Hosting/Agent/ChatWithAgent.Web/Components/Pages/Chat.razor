@page "/chat"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]
@rendermode InteractiveServer

@inject AgentCompletionsApiClient AgentCompletionsApi

<PageTitle>Chat</PageTitle>

<style>
    .chat-page {
        display: grid;
        grid-template-rows: 1fr auto;
        height: 92vh;
    }

    .chat-container {
        overflow-y: auto;
        padding: 10px;
    }

    .chat-history {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .message {
        padding: 5px 10px;
        border-radius: 15px;
        max-width: 60%;
        line-height: 1.2;
    }

    .message.user {
        background: linear-gradient(135deg, #007bff, #00d4ff);
        color: white;
        align-self: flex-end;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 20px;
    }

    .message.agent {
        background-color: #f1f1f1;
        color: black;
        align-self: flex-start;
    }

    .chat-input {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ccc;
    }

    .chat-input textarea {
        flex: 1;
        resize: none;
    }

    .chat-input button {
        margin-left: 10px;
        padding: 10px 20px;
        background: linear-gradient(45deg, #007bff, #00d4ff);
        border: none;
        border-radius: 25px;
        color: white;
        font-size: 16px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .chat-input button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    .chat-input button:hover:enabled {
        background: linear-gradient(45deg, #0056b3, #0099cc);
    }
</style>

<div class="chat-page">
    <div class="chat-container">
        <div class="chat-history">
            @foreach (var message in messages)
            {
                <div class="message @(message.Sender == "User" ? "user" : "agent")">
                    @if (message.Sender != "User")
                    {
                        <strong>@message.Sender: </strong>
                    }
                    @message.Text
                </div>
            }
        </div>
    </div>
    <div class="chat-input">
        <textarea @bind="userMessage" @oninput="HandleInput" @onkeydown="HandleKeyDown" placeholder="Enter your message"></textarea>
        <button class="btn btn-primary" @onclick="SendMessage" disabled="@string.IsNullOrWhiteSpace(userMessage)">Send</button>
    </div>
</div>

@code {
    private List<Message> messages = new();
    private string userMessage = string.Empty;

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(userMessage))
        {
            messages.Add(new Message { Sender = "User", Text = userMessage });
            var response = await AgentCompletionsApi.CompleteAsync(userMessage, CancellationToken.None);
            messages.Add(new Message { Sender = "Agent", Text = response });
            userMessage = string.Empty;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(userMessage))
        {
            await SendMessage();
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        userMessage = e.Value?.ToString() ?? string.Empty;
    }

    private class Message
    {
        public required string Sender { get; set; }

        public required string Text { get; set; }
    }
}
