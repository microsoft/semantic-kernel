// @generated by protobuf-ts 2.9.6 with parameter generate_dependencies
// @generated from protobuf file "teacherStudentInteraction.proto" (package "ProcessWithCloudEvents.Grpc.Contract", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ProcessWithCloudEvents.Grpc.Contract.MessageContent
 */
export interface MessageContent {
    /**
     * @generated from protobuf field: ProcessWithCloudEvents.Grpc.Contract.User user = 1;
     */
    user: User;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * @generated from protobuf field: string processId = 10;
     */
    processId: string;
}
/**
 * @generated from protobuf message ProcessWithCloudEvents.Grpc.Contract.ProcessDetails
 */
export interface ProcessDetails {
    /**
     * @generated from protobuf field: string processId = 1;
     */
    processId: string;
}
/**
 * @generated from protobuf enum ProcessWithCloudEvents.Grpc.Contract.User
 */
export enum User {
    /**
     * @generated from protobuf enum value: STUDENT = 0;
     */
    STUDENT = 0,
    /**
     * @generated from protobuf enum value: TEACHER = 1;
     */
    TEACHER = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class MessageContent$Type extends MessageType<MessageContent> {
    constructor() {
        super("ProcessWithCloudEvents.Grpc.Contract.MessageContent", [
            { no: 1, name: "user", kind: "enum", T: () => ["ProcessWithCloudEvents.Grpc.Contract.User", User] },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "processId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessageContent>): MessageContent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = 0;
        message.content = "";
        message.processId = "";
        if (value !== undefined)
            reflectionMergePartial<MessageContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageContent): MessageContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ProcessWithCloudEvents.Grpc.Contract.User user */ 1:
                    message.user = reader.int32();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string processId */ 10:
                    message.processId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ProcessWithCloudEvents.Grpc.Contract.User user = 1; */
        if (message.user !== 0)
            writer.tag(1, WireType.Varint).int32(message.user);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string processId = 10; */
        if (message.processId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.processId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ProcessWithCloudEvents.Grpc.Contract.MessageContent
 */
export const MessageContent = new MessageContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProcessDetails$Type extends MessageType<ProcessDetails> {
    constructor() {
        super("ProcessWithCloudEvents.Grpc.Contract.ProcessDetails", [
            { no: 1, name: "processId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProcessDetails>): ProcessDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.processId = "";
        if (value !== undefined)
            reflectionMergePartial<ProcessDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProcessDetails): ProcessDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string processId */ 1:
                    message.processId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProcessDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string processId = 1; */
        if (message.processId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.processId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ProcessWithCloudEvents.Grpc.Contract.ProcessDetails
 */
export const ProcessDetails = new ProcessDetails$Type();
/**
 * @generated ServiceType for protobuf service ProcessWithCloudEvents.Grpc.Contract.GrpcTeacherStudentInteraction
 */
export const GrpcTeacherStudentInteraction = new ServiceType("ProcessWithCloudEvents.Grpc.Contract.GrpcTeacherStudentInteraction", [
    { name: "StartProcess", options: {}, I: ProcessDetails, O: ProcessDetails },
    { name: "RequestStudentAgentResponse", options: {}, I: MessageContent, O: MessageContent },
    { name: "ReceiveStudentAgentResponse", serverStreaming: true, options: {}, I: ProcessDetails, O: MessageContent },
    { name: "PublishStudentAgentResponseFromProcess", options: {}, I: MessageContent, O: MessageContent }
]);
