// Copyright (c) Microsoft. All rights reserved.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.SemanticKernel.Agents.Service;
using Microsoft.SemanticKernel.ChatCompletion;
using Microsoft.SemanticKernel.TextToImage;

namespace Microsoft.SemanticKernel.Agents.Template;

/// <summary>
/// An example <see cref="ServiceAgent"/> that intercepts and manipulates
/// the response of the model.  Even though an inner agent is used,
/// all of the implmentatin details for an agent must be addressed as
/// part of the custom flow.
/// </summary>
/// <remarks>
/// If providing a synthetic response, be sure to call:
/// await this.NotifyThreadOfNewMessageAsync(agentThread, response, options, cancellationToken);
/// </remarks>
[ServiceAgentProvider<CustomServiceAgentProvider>()]
public sealed class CustomServiceAgent : ServiceAgent
{
    private const string FinalAgentInstructions =
        """
        Your job is to provide a conversational response that shares an image and the reason for the image.

        Always include the IMAGE URL in your response without encoding.

        REASON: {{$reason}}

        IMAGE URL: {{$image}}
        """;

    private const string PlannerAgentInstructions =
        """
        Examine the full conversation and use it as inspiration for the creation of a graphic image.

        Describe this image you would like to generate in detail, including the subject, background, and any other relevant details.

        Focus on the more recent messages in the conversation, as they are likely to be more relevant to the image generation,
        but do not ignore the earlier messages completely.
        """;

    private ChatCompletionAgent? _agentPlanner;
    private ChatCompletionAgent? _agentFinal;

    /// <inheritdoc/>
    public override async IAsyncEnumerable<AgentResponseItem<ChatMessageContent>> InvokeAsync(
        ICollection<ChatMessageContent> messages,
        AgentThread? thread = null,
        AgentInvokeOptions? options = null,
        [EnumeratorCancellation] CancellationToken cancellationToken = default)
    {
        // Ensure the thread exists and is initialized with the provided messages
        // NOTE: This step is required as the first step when invoking customer behavior.
        ChatHistoryAgentThread agentThread = await this.EnsureThreadExistsWithMessagesAsync(
            messages,
            thread,
            () => new ChatHistoryAgentThread(),
            cancellationToken).ConfigureAwait(false);

        // Generate an image from a plan that is generated by examining the conversation.
        AgentInvokeOptions finalOptions = await this.GeneratePlanAndImageAsync(agentThread.ChatHistory, options, cancellationToken);

        // Get the initialized responding agent
        ChatCompletionAgent agentFinal = this.GetRespondingAgent();
        IAsyncEnumerable<AgentResponseItem<ChatMessageContent>> responses =
            agentFinal.InvokeAsync(
                [],
                agentThread,
                finalOptions,
                cancellationToken);
        // Enumerate the responses
        await foreach (AgentResponseItem<ChatMessageContent> response in responses)
        {
            yield return response;
        }
    }

    /// <inheritdoc/>
    public override async IAsyncEnumerable<AgentResponseItem<StreamingChatMessageContent>> InvokeStreamingAsync(
        ICollection<ChatMessageContent> messages,
        AgentThread? thread = null,
        AgentInvokeOptions? options = null,
        [EnumeratorCancellation] CancellationToken cancellationToken = default)
    {
        // Ensure the thread exists and is initialized with the provided messages
        // NOTE: This step is required as the first step when invoking customer behavior.
        ChatHistoryAgentThread agentThread = await this.EnsureThreadExistsWithMessagesAsync(
            messages,
            thread,
            () => new ChatHistoryAgentThread(),
            cancellationToken).ConfigureAwait(false);

        // Generate an image from a plan that is generated by examining the conversation.
        AgentInvokeOptions finalOptions = await this.GeneratePlanAndImageAsync(agentThread.ChatHistory, options, cancellationToken);

        // Get the initialized responding agent
        ChatCompletionAgent finalAgent = this.GetRespondingAgent();
        // Enumerate the streamed responses
        IAsyncEnumerable<AgentResponseItem<StreamingChatMessageContent>> responses =
            finalAgent.InvokeStreamingAsync(
                [],
                agentThread,
                finalOptions,
                cancellationToken: cancellationToken);
        // Enumerate the streamed responses
        await foreach (AgentResponseItem<StreamingChatMessageContent> response in responses)
        {
            yield return response;
        }
    }

    private async Task<AgentInvokeOptions> GeneratePlanAndImageAsync(
        ChatHistory history,
        AgentInvokeOptions? options,
        CancellationToken cancellationToken)
    {
        // Get the initialized planner agent
        ChatCompletionAgent agentPlanner = this.GetPlannerAgent();
        // Invoke the planner agent
        AgentResponseItem<ChatMessageContent> plannerResponse =
            await agentPlanner.InvokeAsync(
                [.. history], // Provide the entire conversation
                null, // Don't use the main thread
                options,
                cancellationToken: cancellationToken).SingleAsync(cancellationToken);
        // Generate an image based on the plan
        string plan = plannerResponse.Message.Content!;
        Debug.WriteLine($"PLAN: {plan}");
        Uri imageUri = await this.GenerateImageAsync(plan);
        Debug.WriteLine($"IMAGE: {imageUri}");
        // Construct the invocation options for the final agent
        AgentInvokeOptions finalOptions =
            new()
            {
                // Retain any message handler
                OnIntermediateMessage = options?.OnIntermediateMessage,
                // Provide prompt template parameter values
                KernelArguments =
                    new()
                    {
                        { "reason", plan },
                        { "image", imageUri.ToString() },
                    }
            };
        return finalOptions;
    }

    /// <inheritdoc/>
    private ChatCompletionAgent GetPlannerAgent()
    {
        this._agentPlanner ??=
            new ChatCompletionAgent()
            {
                Name = this.Name,
                Instructions = PlannerAgentInstructions,
                Kernel = this.Kernel,
            };

        return this._agentPlanner;
    }

    /// <inheritdoc/>
    private ChatCompletionAgent GetRespondingAgent()
    {
        this._agentFinal ??=
            new ChatCompletionAgent(
                new PromptTemplateConfig() { Template = FinalAgentInstructions },
                new KernelPromptTemplateFactory())
            {
                Name = this.Name,
                Kernel = this.Kernel,
            };

        return this._agentFinal;
    }

    private async Task<Uri> GenerateImageAsync(string description)
    {
        ITextToImageService imageService = this.Kernel.GetRequiredService<ITextToImageService>();
        string imageReference = await imageService.GenerateImageAsync(description, 1024, 1024).ConfigureAwait(false);
        return new Uri(imageReference);
    }
}
