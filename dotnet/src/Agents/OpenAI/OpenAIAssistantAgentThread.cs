// Copyright (c) Microsoft. All rights reserved.

using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.SemanticKernel.Agents.OpenAI.Internal;
using OpenAI.Assistants;

namespace Microsoft.SemanticKernel.Agents.OpenAI;

/// <summary>
/// Represents a conversation thread for an Open AI Assistant agent.
/// </summary>
public class OpenAIAssistantAgentThread : AgentThread
{
    private readonly AssistantClient _client;
    private bool _isActive = false;
    private string? _id = null;

    /// <summary>
    /// Initializes a new instance of the <see cref="OpenAIAssistantAgentThread"/> class.
    /// </summary>
    /// <param name="client">The assistant client to use for interacting with threads.</param>
    public OpenAIAssistantAgentThread(AssistantClient client)
    {
        Verify.NotNull(client);

        this._client = client;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OpenAIAssistantAgentThread"/> class that resumes an existing thread.
    /// </summary>
    /// <param name="client">The assistant client to use for interacting with threads.</param>
    /// <param name="id">The ID of an existing thread to resume.</param>
    public OpenAIAssistantAgentThread(AssistantClient client, string id)
    {
        Verify.NotNull(client);
        Verify.NotNull(id);

        this._client = client;
        this._isActive = true;
        this._id = id;
    }

    /// <inheritdoc />
    public override bool IsActive => this._isActive;

    /// <inheritdoc />
    public override string? Id => this._id;

    /// <inheritdoc />
    public override async Task<string> StartAsync(CancellationToken cancellationToken = default)
    {
        if (this._isActive)
        {
            throw new InvalidOperationException("You cannot start this thread, since the thread is already active.");
        }

        var assistantThreadResponse = await this._client.CreateThreadAsync(cancellationToken: cancellationToken).ConfigureAwait(false);
        this._id = assistantThreadResponse.Value.Id;
        this._isActive = true;

        return assistantThreadResponse.Value.Id;
    }

    /// <inheritdoc />
    public override async Task EndAsync(CancellationToken cancellationToken = default)
    {
        if (!this._isActive)
        {
            throw new InvalidOperationException("This thread cannot be ended, since the thread is not currently active.");
        }

        await this._client.DeleteThreadAsync(this._id, cancellationToken).ConfigureAwait(false);
        this._id = null;
        this._id = null;
    }

    /// <inheritdoc />
    public override async Task OnNewMessageAsync(ChatMessageContent newMessage, CancellationToken cancellationToken = default)
    {
        if (!this._isActive)
        {
            throw new InvalidOperationException("Messages cannot be added to this thread, since the thread is not currently active.");
        }

        // If the message was generated by this agent, it is already in the thread and we shouldn't add it again.
        if (newMessage.Metadata == null || !newMessage.Metadata.TryGetValue("ThreadId", out var messageThreadId) || !string.Equals(messageThreadId, this._id))
        {
            await AssistantThreadActions.CreateMessageAsync(this._client, this._id!, newMessage, cancellationToken).ConfigureAwait(false);
        }
    }
}
