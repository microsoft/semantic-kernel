# Copyright (c) Microsoft. All rights reserved.

import asyncio
import os
import uuid

from samples.concepts.agents.bedrock_agent.setup_utils import use_existing_agent, use_new_agent
from semantic_kernel.contents.binary_content import BinaryContent
from semantic_kernel.contents.chat_message_content import ChatMessageContent
from semantic_kernel.contents.streaming_chat_message_content import StreamingChatMessageContent

# This sample shows how to interact with a Bedrock agent that is capable of writing and executing code.
# This sample uses the following main component(s):
# - a Bedrock agent
# You will learn how to create a new or connect to an existing Bedrock agent and ask it a question
# that requires coding to answer.
# After running this sample, a bar chart will be generated and saved to a file in the same directory
# as this script.

# By default, this sample will create a new agent that will be deleted after the session ends.
# If you want to use an existing agent, set this to False and fill in required parameters.
CREATE_NEW_AGENT = True

# If you want to enable streaming, set this to True.
# In order to perform streaming, you need to have the permission on action: bedrock:InvokeModelWithResponseStream
STREAMING = False

# Common parameters whether creating a new agent or using an existing agent
AGENT_NAME = "semantic-kernel-bedrock-agent-simple-chat-code-interpreter-sample"

# If creating a new agent, you need to specify the following:
INSTRUCTION = "You are a friendly assistant. You help people find information."

# If using an existing agent, you need to specify the following:
AGENT_ID = ""


ASK = """
Create a bar chart for the following data:
Panda   5
Tiger   8 
Lion    3
Monkey  6
Dolpin  2
"""


async def main():
    if CREATE_NEW_AGENT:
        bedrock_agent = await use_new_agent(AGENT_NAME, INSTRUCTION, enable_code_interpreter=True)
    else:
        bedrock_agent = await use_existing_agent(AGENT_ID, AGENT_NAME)

    # Use a uiud as the session id
    new_session_id = str(uuid.uuid4())

    # Placeholder for the file generated by the code interpreter
    binary_item: BinaryContent | None = None

    # Invoke the agent
    if STREAMING:
        print("Response: ")
        async for response in bedrock_agent.invoke_stream(
            session_id=new_session_id,
            input_text=ASK,
        ):
            print(response, end="")
            assert isinstance(response, StreamingChatMessageContent)  # nosec
            if not binary_item:
                binary_item = next((item for item in response.items if isinstance(item, BinaryContent)), None)
        print()
    else:
        async for response in bedrock_agent.invoke(
            session_id=new_session_id,
            input_text=ASK,
        ):
            print(f"Response:\n{response}")
            assert isinstance(response, ChatMessageContent)  # nosec
            binary_item = next(item for item in response.items if isinstance(item, BinaryContent))

    if CREATE_NEW_AGENT:
        # Delete the agent if it was created in this session
        await bedrock_agent.delete_agent()

    # Save the chart to a file
    if not binary_item:
        raise RuntimeError("No chart generated")

    file_path = os.path.join(os.path.dirname(__file__), binary_item.metadata["name"])
    binary_item.write_to_file(os.path.join(os.path.dirname(__file__), binary_item.metadata["name"]))
    print(f"Chart saved to {file_path}")


if __name__ == "__main__":
    asyncio.run(main())
