# Copyright (c) Microsoft. All rights reserved.

import asyncio
import os
import uuid

import dotenv

from semantic_kernel.agents.bedrock.bedrock_agent import BedrockAgent
from semantic_kernel.contents.binary_content import BinaryContent
from semantic_kernel.contents.chat_message_content import ChatMessageContent
from semantic_kernel.contents.streaming_chat_message_content import StreamingChatMessageContent

dotenv.load_dotenv()


# By default, this sample will create a new agent.
# If you want to use an existing agent, set this to False and fill in required parameters.
CREATE_NEW_AGENT = True

# If you want to enable streaming, set this to True.
# In order to perform streaming, you need to have the permission on action: bedrock:InvokeModelWithResponseStream
STREAMING = False

# Common parameters whether creating a new agent or using an existing agent
AGENT_ROLE_AMAZON_RESOURCE_NAME = os.getenv("AGENT_ROLE_AMAZON_RESOURCE_NAME")
AGENT_NAME = "semantic-kernel-bedrock-agent-simple-chat-code-interpreter-sample"

# If creating a new agent, you need to specify the following:
# [Note] You may have to request access to the foundation model if you don't have it.
# [Note] The success rate of function calling may vary depending on the foundation model.
#        Advanced models may have better performance.
FOUNDATION_MODEL = os.getenv("FOUNDATION_MODEL")
INSTRUCTION = "You are a fridenly assistant. You help people find information."

# If using an existing agent, you need to specify the following:
AGENT_ID = ""


ASK = """
Create a bar chart for the following data:
Panda   5
Tiger   8 
Lion    3
Monkey  6
Dolpin  2
"""


async def use_new_agent():
    """Create a new bedrock agent."""
    return await BedrockAgent.create_new_agent(
        agent_name=AGENT_NAME,
        foundation_model=FOUNDATION_MODEL,
        role_arn=AGENT_ROLE_AMAZON_RESOURCE_NAME,
        instruction=INSTRUCTION,
        # This will create a code interpreter action group for the agent.
        enable_code_interpreter=True,
    )


async def use_existing_agent():
    """Use an existing bedrock agent that has been created and prepared.

    Make sure the existing agent has the action group created for code interpreter.
    """
    return await BedrockAgent.use_existing_agent(
        agent_arn=AGENT_ROLE_AMAZON_RESOURCE_NAME,
        agent_id=AGENT_ID,
        agent_name=AGENT_NAME,
    )


async def main():
    if CREATE_NEW_AGENT:
        bedrock_agent = await use_new_agent()
    else:
        bedrock_agent = await use_existing_agent()

    # Use an uiud as the session id
    new_session_id = str(uuid.uuid4())

    # Placeholder for the file generated by the code interpreter
    binary_item: BinaryContent | None = None

    # Invoke the agent
    if STREAMING:
        print("Response: ")
        async for response in bedrock_agent.invoke_stream(
            session_id=new_session_id,
            input_text=ASK,
        ):
            print(response, end="")
            assert isinstance(response, StreamingChatMessageContent)  # nosec
            if not binary_item:
                binary_item = next((item for item in response.items if isinstance(item, BinaryContent)), None)
        print()
    else:
        async for response in bedrock_agent.invoke(
            session_id=new_session_id,
            input_text=ASK,
        ):
            print(f"Response:\n{response}")
            assert isinstance(response, ChatMessageContent)  # nosec
            binary_item = next(item for item in response.items if isinstance(item, BinaryContent))

    # Save the chart to a file
    if not binary_item:
        raise RuntimeError("No chart generated")

    file_path = os.path.join(os.path.dirname(__file__), binary_item.metadata["name"])
    binary_item.write_to_file(os.path.join(os.path.dirname(__file__), binary_item.metadata["name"]))
    print(f"Chart saved to {file_path}")


if __name__ == "__main__":
    asyncio.run(main())
